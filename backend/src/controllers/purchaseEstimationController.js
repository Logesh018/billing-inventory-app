// controllers/purchaseEstimationController.js
import mongoose from "mongoose";
import PurchaseEstimation from "../models/PurchaseEstimationSchema.js";
import Supplier from "../models/supplier.js";
import { pdfService } from "../services/pdfService.js";
import { cloudinaryService } from "../services/cloudinaryService.js";

// @desc    Create a new purchase estimation
// @route   POST /api/purchase-estimations
export const createPurchaseEstimation = async (req, res) => {
  try {
    const {
      fabricPurchases = [],
      buttonsPurchases = [],
      packetsPurchases = [],
      remarks,
      estimationDate,
    } = req.body;

    console.log("POST /api/purchase-estimations payload:", req.body);

    // Validate that at least one purchase item exists
    const hasItems =
      (fabricPurchases && fabricPurchases.length > 0) ||
      (buttonsPurchases && buttonsPurchases.length > 0) ||
      (packetsPurchases && packetsPurchases.length > 0);

    if (!hasItems) {
      return res.status(400).json({
        message: "At least one purchase item (fabric, buttons, or packets) is required"
      });
    }

    // Validate fabricPurchases structure
    for (const item of fabricPurchases) {
      if (!item.productName || !item.vendor || !item.fabricType || !item.quantity || !item.costPerUnit) {
        return res.status(400).json({
          message: "Each fabric purchase requires productName, vendor, fabricType, quantity, and costPerUnit"
        });
      }

      if (item.vendorId && !mongoose.Types.ObjectId.isValid(item.vendorId)) {
        return res.status(400).json({ message: "Invalid supplier ID format in fabric purchases" });
      }
    }

    // Validate buttonsPurchases
    for (const item of buttonsPurchases) {
      if (!item.productName || !item.size || !item.vendor || !item.quantity || !item.costPerUnit) {
        return res.status(400).json({
          message: "Each button purchase requires productName, size, vendor, quantity, and costPerUnit"
        });
      }

      if (item.vendorId && !mongoose.Types.ObjectId.isValid(item.vendorId)) {
        return res.status(400).json({ message: "Invalid supplier ID format in button purchases" });
      }
    }

    // Validate packetsPurchases
    for (const item of packetsPurchases) {
      if (!item.productName || !item.size || !item.vendor || !item.quantity || !item.costPerUnit) {
        return res.status(400).json({
          message: "Each packet purchase requires productName, size, vendor, quantity, and costPerUnit"
        });
      }

      if (item.vendorId && !mongoose.Types.ObjectId.isValid(item.vendorId)) {
        return res.status(400).json({ message: "Invalid supplier ID format in packet purchases" });
      }
    }

    // Create new purchase estimation - PESNo will be auto-generated by pre-save hook
    const newEstimation = new PurchaseEstimation({
      estimationDate: estimationDate || Date.now(),
      fabricPurchases,
      buttonsPurchases,
      packetsPurchases,
      remarks: remarks || "Purchase Estimation",
      status: "Draft",
    });

    const savedEstimation = await newEstimation.save();
    console.log("✅ Purchase Estimation created:", savedEstimation.PESNo);

    res.status(201).json({
      message: "Purchase Estimation created successfully",
      estimation: savedEstimation
    });
  } catch (err) {
    console.error("❌ Error in createPurchaseEstimation:", err);
    
    // Handle Mongoose validation errors more gracefully
    if (err.name === 'ValidationError') {
      const errors = Object.values(err.errors).map(e => e.message);
      return res.status(400).json({ 
        message: "Validation failed",
        errors: errors 
      });
    }
    
    res.status(400).json({ message: err.message });
  }
};

// @desc    Get all purchase estimations
// @route   GET /api/purchase-estimations
export const getPurchaseEstimations = async (req, res) => {
  try {
    const estimations = await PurchaseEstimation.find()
      .populate("fabricPurchases.vendorId", "name code")
      .populate("buttonsPurchases.vendorId", "name code")
      .populate("packetsPurchases.vendorId", "name code")
      .sort({ createdAt: -1 });
    res.json(estimations);
  } catch (err) {
    console.error("❌ Error in getPurchaseEstimations:", err.message);
    res.status(500).json({ message: err.message });
  }
};

// @desc    Get single purchase estimation by ID
// @route   GET /api/purchase-estimations/:id
export const getPurchaseEstimationById = async (req, res) => {
  try {
    const estimation = await PurchaseEstimation.findById(req.params.id)
      .populate("fabricPurchases.vendorId", "name code")
      .populate("buttonsPurchases.vendorId", "name code")
      .populate("packetsPurchases.vendorId", "name code");
    
    if (!estimation) {
      return res.status(404).json({ message: "Purchase Estimation not found" });
    }
    
    res.json(estimation);
  } catch (err) {
    console.error("❌ Error in getPurchaseEstimationById:", err.message);
    res.status(500).json({ message: err.message });
  }
};

// @desc    Update a purchase estimation
// @route   PUT /api/purchase-estimations/:id
export const updatePurchaseEstimation = async (req, res) => {
  try {
    const { id } = req.params;
    const {
      fabricPurchases,
      buttonsPurchases,
      packetsPurchases,
      remarks,
      estimationDate,
      status,
    } = req.body;

    const estimation = await PurchaseEstimation.findById(id);
    if (!estimation) {
      return res.status(404).json({ message: "Purchase Estimation not found" });
    }

    // Validate fabricPurchases if provided
    if (fabricPurchases !== undefined) {
      for (const item of fabricPurchases) {
        if (!item.productName || !item.vendor || !item.fabricType || !item.quantity || !item.costPerUnit) {
          return res.status(400).json({
            message: "Each fabric purchase requires productName, vendor, fabricType, quantity, and costPerUnit"
          });
        }
      }
      estimation.fabricPurchases = fabricPurchases;
    }

    // Validate buttonsPurchases if provided
    if (buttonsPurchases !== undefined) {
      for (const item of buttonsPurchases) {
        if (!item.productName || !item.size || !item.vendor || !item.quantity || !item.costPerUnit) {
          return res.status(400).json({
            message: "Each button purchase requires productName, size, vendor, quantity, and costPerUnit"
          });
        }
      }
      estimation.buttonsPurchases = buttonsPurchases;
    }

    // Validate packetsPurchases if provided
    if (packetsPurchases !== undefined) {
      for (const item of packetsPurchases) {
        if (!item.productName || !item.size || !item.vendor || !item.quantity || !item.costPerUnit) {
          return res.status(400).json({
            message: "Each packet purchase requires productName, size, vendor, quantity, and costPerUnit"
          });
        }
      }
      estimation.packetsPurchases = packetsPurchases;
    }

    if (remarks !== undefined) estimation.remarks = remarks;
    if (estimationDate !== undefined) estimation.estimationDate = estimationDate;
    if (status !== undefined) estimation.status = status;

    const updatedEstimation = await estimation.save();
    console.log("✅ Updated purchase estimation:", updatedEstimation.PESNo);

    res.json({
      message: "Purchase Estimation updated successfully",
      estimation: updatedEstimation
    });
  } catch (err) {
    console.error("❌ Error in updatePurchaseEstimation:", err.message);
    
    if (err.name === 'ValidationError') {
      const errors = Object.values(err.errors).map(e => e.message);
      return res.status(400).json({ 
        message: "Validation failed",
        errors: errors 
      });
    }
    
    res.status(400).json({ message: err.message });
  }
};

// @desc    Delete a purchase estimation
// @route   DELETE /api/purchase-estimations/:id
export const deletePurchaseEstimation = async (req, res) => {
  try {
    const estimation = await PurchaseEstimation.findById(req.params.id);
    if (!estimation) {
      return res.status(404).json({ message: "Purchase Estimation not found" });
    }

    // Delete PDF from Cloudinary if exists
    if (estimation.pdfPublicId) {
      await cloudinaryService.deletePDF(estimation.pdfPublicId);
      console.log("✅ PDF deleted from Cloudinary:", estimation.pdfPublicId);
    }

    await PurchaseEstimation.findByIdAndDelete(req.params.id);
    res.json({ message: "Purchase Estimation deleted successfully" });
  } catch (err) {
    console.error("❌ Error in deletePurchaseEstimation:", err.message);
    res.status(500).json({ message: err.message });
  }
};

// @desc    Get or Generate PDF for purchase estimation
// @route   GET /api/purchase-estimations/:id/pdf
export const getEstimationPDF = async (req, res) => {
  try {
    const estimation = await PurchaseEstimation.findById(req.params.id);

    if (!estimation) {
      return res.status(404).json({ message: "Purchase Estimation not found" });
    }

    // If PDF already exists, return it immediately
    if (estimation.pdfUrl) {
      console.log("✅ PDF already exists, returning URL:", estimation.pdfUrl);
      return res.json({
        message: "PDF retrieved successfully",
        pdfUrl: estimation.pdfUrl,
        alreadyExists: true
      });
    }

    // If no PDF exists, return error asking to generate it
    return res.status(404).json({ 
      message: "PDF not generated yet. Please generate it first.",
      needsGeneration: true 
    });
  } catch (err) {
    console.error("❌ Error in getEstimationPDF:", err.message);
    res.status(500).json({ message: err.message });
  }
};

// @desc    Generate PDF for purchase estimation (separate endpoint)
// @route   POST /api/purchase-estimations/:id/generate-pdf
export const generateEstimationPDF = async (req, res) => {
  try {
    const estimation = await PurchaseEstimation.findById(req.params.id)
      .populate("fabricPurchases.vendorId", "name code mobile")
      .populate("buttonsPurchases.vendorId", "name code mobile")
      .populate("packetsPurchases.vendorId", "name code mobile");

    if (!estimation) {
      return res.status(404).json({ message: "Purchase Estimation not found" });
    }

    // If PDF already exists, just return it (don't regenerate)
    if (estimation.pdfUrl) {
      console.log("✅ PDF already exists:", estimation.pdfUrl);
      return res.json({
        message: "PDF already exists",
        pdfUrl: estimation.pdfUrl,
        estimation: estimation
      });
    }

    console.log("🔄 Generating PDF for estimation:", estimation.PESNo);

    // Prepare document data for PDF service
    const documentData = {
      documentType: 'purchase-estimation',
      documentNo: estimation.PESNo,
      documentDate: estimation.estimationDate,
      businessDetails: {
        name: process.env.BUSINESS_NAME || "Your Business Name",
        address: process.env.BUSINESS_ADDRESS || "Business Address",
        city: process.env.BUSINESS_CITY || "City",
        state: process.env.BUSINESS_STATE || "State",
        pincode: process.env.BUSINESS_PINCODE || "000000",
        phone: process.env.BUSINESS_PHONE || "",
        email: process.env.BUSINESS_EMAIL || "",
        gst: process.env.BUSINESS_GST || "",
      },
      fabricPurchases: estimation.fabricPurchases || [],
      buttonsPurchases: estimation.buttonsPurchases || [],
      packetsPurchases: estimation.packetsPurchases || [],
      totalFabricCost: estimation.totalFabricCost || 0,
      totalButtonsCost: estimation.totalButtonsCost || 0,
      totalPacketsCost: estimation.totalPacketsCost || 0,
      totalFabricGst: estimation.totalFabricGst || 0,
      totalButtonsGst: estimation.totalButtonsGst || 0,
      totalPacketsGst: estimation.totalPacketsGst || 0,
      grandTotalCost: estimation.grandTotalCost || 0,
      grandTotalWithGst: estimation.grandTotalWithGst || 0,
      remarks: estimation.remarks || '',
      status: estimation.status || 'Draft',
    };

    // Generate PDF
    const pdfResult = await pdfService.generateDocumentPDF(documentData);

    // Update estimation with PDF URL
    estimation.pdfUrl = pdfResult.url;
    estimation.pdfPublicId = pdfResult.publicId;
    estimation.status = "Finalized";
    await estimation.save();

    console.log("✅ PDF generated and uploaded:", pdfResult.url);

    res.json({
      message: "PDF generated successfully",
      pdfUrl: pdfResult.url,
      estimation: estimation
    });
  } catch (err) {
    console.error("❌ Error in generateEstimationPDF:", err.message);
    res.status(500).json({ message: "Failed to generate PDF: " + err.message });
  }
};

// @desc    Search Suppliers for dropdown (autocomplete)
// @route   GET /api/purchase-estimations/search/suppliers
export const searchSuppliers = async (req, res) => {
  try {
    const { q } = req.query;

    if (!q || q.length < 2) {
      return res.status(200).json([]);
    }

    const suppliers = await Supplier.searchByName(q);

    console.log(`Found ${suppliers.length} suppliers for query: "${q}"`);
    res.status(200).json(suppliers);
  } catch (error) {
    console.error("❌ Error in searchSuppliers:", error.message);
    res.status(500).json({
      message: "Error searching suppliers",
      error: error.message
    });
  }
};